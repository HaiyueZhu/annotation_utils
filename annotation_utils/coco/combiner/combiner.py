import operator

from logger import logger
from common_utils.time_utils import get_present_year, get_present_time_Ymd
from common_utils.user_utils import get_username

from ..annotation import COCO_AnnotationFileParser
from ..structs import COCO_Info, COCO_License_Handler, COCO_Image_Handler, \
    COCO_Annotation_Handler, COCO_Category_Handler
from ..writer import COCO_Writer

class ID_Map:
    def __init__(self, unique_key: str, old_id: int, new_id: int):
        self.unique_key = unique_key
        self.old_id = old_id
        self.new_id = new_id

class ID_Mapper:
    def __init__(self):
        self.id_maps = []

    def sort(self):
        self.id_maps.sort(key=operator.attrgetter('old_id'), reverse=False)

    def add_id_map(self, id_map: ID_Map):
        self.id_maps.append(id_map)

    def add(self, unique_key: str, old_id: int, new_id: int):
        new_id_map = ID_Map(
            unique_key=unique_key,
            old_id=old_id,
            new_id=new_id
        )
        self.add_id_map(new_id_map)
    
    def get_new_id(self, unique_key: str, old_id: int) -> (bool, int):
        found = False
        new_id = None
        for id_map in self.id_maps:
            if id_map.unique_key == unique_key and id_map.old_id == old_id:
                found = True
                new_id = id_map.new_id
        return found, new_id

class COCO_Mapper_Handler:
    def __init__(self):
        self.license_mapper = ID_Mapper()
        self.image_mapper = ID_Mapper()
        self.annotation_mapper = ID_Mapper()
        self.category_mapper = ID_Mapper()

class COCO_Annotations_Combiner:
    def __init__(self, img_dir_list: list, ann_path_list: list):
        # Constructor Parameters
        self.img_dir_list = img_dir_list
        self.ann_path_list = ann_path_list

        # Working Parameters
        self.info = COCO_Info(
            description="COCO annotation generated by combining several coco annotations.",
            url='https://github.com/cm107/KeypointPose',
            version='1.0',
            year=get_present_year(),
            contributor=get_username(),
            date_created=get_present_time_Ymd()
        )
        self.licenses = COCO_License_Handler()
        self.images = COCO_Image_Handler()
        self.annotations = COCO_Annotation_Handler()
        self.categories = COCO_Category_Handler()
        self.id_mapper = COCO_Mapper_Handler()

    def add_licenses(self, ann_key: str, coco_license_handler: COCO_License_Handler):
        for coco_license in coco_license_handler.license_list:
            found = False
            found_coco_license = None
            for loaded_coco_license in self.licenses.license_list:
                if coco_license.url == loaded_coco_license.url and coco_license.name == loaded_coco_license.name:
                    found = True
                    found_coco_license = loaded_coco_license
                    break
            old_id = coco_license.id
            if not found:
                new_id = len(self.licenses.license_list)
                coco_license.id = new_id
                self.licenses.add(coco_license)
            else: # Add map only
                new_id = found_coco_license.id

            self.id_mapper.license_mapper.add(
                unique_key=ann_key,
                old_id=old_id,
                new_id=new_id
            )

    def add_images(self, ann_key: str, coco_image_handler: COCO_Image_Handler):
        for coco_image in coco_image_handler.image_list:
            # No checks should be necessary
            old_id = coco_image.id
            new_id = len(self.images.image_list)

            # Get License Id
            found, new_license_id = self.id_mapper.license_mapper.get_new_id(
                unique_key=ann_key, old_id=coco_image.license_id
            )
            if not found:
                logger.error(f"Couldn't find unique_key: {ann_key}, old_id: {coco_image.license_id} pair in license_mapper.")
                raise Exception

            # Update Id References
            coco_image.license_id = new_license_id
            coco_image.id = new_id
            
            self.images.add(coco_image)
            self.id_mapper.image_mapper.add(
                unique_key=ann_key,
                old_id=old_id,
                new_id=new_id
            )

    def add_annotations(self, ann_key: str, coco_annotation_handler: COCO_Annotation_Handler):
        for coco_annotation in coco_annotation_handler.annotation_list:
            # No checks should be necessary
            old_id = coco_annotation.id
            new_id = len(self.annotations.annotation_list)
            
            # Get Image Id
            found, new_image_id = self.id_mapper.image_mapper.get_new_id(
                unique_key=ann_key, old_id=coco_annotation.image_id
            )
            if not found:
                logger.error(f"Couldn't find unique_key: {ann_key}, old_id: {coco_annotation.image_id} pair in image_mapper.")
                raise Exception

            # Get Category Id
            found, new_category_id = self.id_mapper.category_mapper.get_new_id(
                unique_key=ann_key, old_id=coco_annotation.category_id
            )
            if not found:
                logger.error(f"Couldn't find unique_key: {ann_key}, old_id: {coco_annotation.category_id} pair in category_mapper.")
                raise Exception

            # Update Id References
            coco_annotation.image_id = new_image_id
            coco_annotation.category_id = new_category_id
            coco_annotation.id = new_id
            
            self.annotations.add(coco_annotation)
            self.id_mapper.annotation_mapper.add(
                unique_key=ann_key,
                old_id=old_id,
                new_id=new_id
            )

    def add_categories(self, ann_key: str, coco_category_handler: COCO_Category_Handler):
        for coco_category in coco_category_handler.category_list:
            found = False
            found_coco_category = None
            for loaded_coco_category in self.categories.category_list:
                if coco_category.supercategory == loaded_coco_category.supercategory and \
                    coco_category.name == loaded_coco_category.name:
                    found = True
                    found_coco_category = loaded_coco_category
                    break
            old_id = coco_category.id
            if not found:
                new_id = len(self.categories.category_list)
                coco_category.id = new_id
                self.categories.add(coco_category)
            else: # Add map only
                new_id = found_coco_category.id

            self.id_mapper.category_mapper.add(
                unique_key=ann_key,
                old_id=old_id,
                new_id=new_id
            )

    def load_combined(self, verbose: bool=False):
        for i, [img_dir, ann_path] in enumerate(zip(self.img_dir_list, self.ann_path_list)):
            if verbose: logger.info(f"{i}: Parsing {img_dir}, {ann_path}")
            parser = COCO_AnnotationFileParser(annotation_path=ann_path)
            parser.load(verbose=verbose)
            if verbose: logger.good("Annotations Loaded")
            self.add_licenses(ann_key=ann_path, coco_license_handler=parser.licenses)
            if verbose: logger.good(f"Licenses Updated")
            self.add_images(ann_key=ann_path, coco_image_handler=parser.images)
            if verbose: logger.good(f"Images Updated")
            self.add_categories(ann_key=ann_path, coco_category_handler=parser.categories)
            if verbose: logger.good(f"Categories Updated")
            self.add_annotations(ann_key=ann_path, coco_annotation_handler=parser.annotations)
            if verbose: logger.good(f"Annotations Updated")
        if verbose: logger.good(f"Finished Loaded Combined Annotations")

    def write_combined(self, output_path: str, verbose: bool=False):
        writer = COCO_Writer(
            info=self.info,
            licenses=self.licenses,
            images=self.images,
            annotations=self.annotations,
            categories=self.categories,
            output_path=output_path
        )
        json_dict = writer.build_json_dict(verbose=verbose)
        writer.write_json_dict(json_dict=json_dict, verbose=verbose)